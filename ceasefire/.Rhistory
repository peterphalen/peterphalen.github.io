draw_from <- 0
for (j in (s):1){
draw_from <- draw_from - seasonal[t - j]
}
seasonal[t + 1] <- draw_from
}
plot(seasonal)
s
t <- s
s
t
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
t <- s
t
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t - j]
}
draw_from
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
t < -s
t <- s
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t + 1 - j]
}
draw_from
s
t
seasonal[t]
seasonal[t + 1]
seasonal[t - 1]
draw_from <- 0
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t - j]
}
draw_from
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t + 1 - j]
}
draw_from
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t -1 - j]
}
draw_from
draw_from <- 0
for (j in (s-1):1){
draw_from <- draw_from - seasonal[t - j]
}
draw_from
draw_from <- 0
j
draw_from - seasonal[t - j]
seasonal[t - j]
t
length(1:365)
sum(daily$shootings)
sum(daily$shootings[1:364])
sum(-daily$shootings[1:364])
sum(daily$shootings[1:364])
sum(daily$shootings[1:363])
sum(daily$shootings[1:364])
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t + 1] <- seasonal[t + 1] - seasonal[t + 1- j]
}
}
plot(seasonal)
plot(seasonal > -300)
plot(seasonal[which(seasonal > -300)])
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t + 1] <- seasonal[t + 1] - seasonal[t + 1 - j]
}
}
plot(seasonal)
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t] <- seasonal[t] - seasonal[t - j]
}
}
plot(seasonal)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstan)
library(lubridate)
require(ggfortify)
library(scales)
library(bayesplot)
# data came from here: https/:/data.baltimorecity.gov/Public-Safety/BPD-Part-1-Victim-Based-Crime-Data/wsfq-mvij/data
# but I'm loading a copy that I backed up on github
bpd <- read_csv("https://raw.githubusercontent.com/peterphalen/ceasefire/master/BPD_Part_1_Victim_Based_Crime_Data.csv")
# subset to shootings or homicides with a firearm
bpd <- subset(bpd, Description == "SHOOTING" |
(Description == "HOMICIDE" & Weapon == "FIREARM"))
bpd$CrimeDate <- as.Date(bpd$CrimeDate, format = "%m/%d/%Y")
# there are many crimes per day. collapse to daily counts
daily <- bpd %>% group_by(CrimeDate) %>% summarise(shootings = n())
# fill missing dates, because some had no shootings
full.ts <- data.frame(CrimeDate = seq(daily$CrimeDate[1],
daily$CrimeDate[nrow(daily)], by="day"))
daily <- full_join(full.ts,daily)
daily <- daily %>% group_by(CrimeDate) %>% mutate_all(funs(ifelse(is.na(.),0,.)))
ggplot(daily) +
aes(x=CrimeDate, y=shootings) +
geom_point(alpha=.2) +
xlab("date") +
ylab("shootings") +
scale_y_continuous(breaks=c(0,4,8,12)) +
scale_x_date(labels = date_format("%b %Y")) +
ggtitle(" ",
subtitle="Baltimore (2012-present)")
daily$weekday <- factor(weekdays(daily$CrimeDate),
levels=c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"))
daily$week.of.year <- week(daily$CrimeDate)
ceasefire.initial <-
as.Date(
c("08/04/2017",
"11/03/2017",
"02/02/2018",
"05/11/2018",
"08/03/2018",
"11/02/2018",
"02/01/2019",
"05/10/2019"),
format="%m/%d/%Y")
ceasefire.weekends <-
lapply(ceasefire.initial,
function(x){
seq(from=x,
by="day",
length.out=3)})
ceasefire.weekends <- do.call("c",
ceasefire.weekends)
# dummy variable
daily$ceasefire <- ifelse(daily$CrimeDate %in% ceasefire.weekends, 1, 0)
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
int<lower=0,upper=1> ceasefire[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real ceasefire_effect;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t] + ceasefire_effect * ceasefire[t];
}
}
model {
real draw_from;
for (t in 365:n){
draw_from = 0;
for (j in 1:364){
draw_from = draw_from - y_seasonal[t - j];
}
y_seasonal[t] ~ normal(draw_from, sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + y_seasonal[t]);
}"
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
int<lower=0,upper=1> ceasefire[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real ceasefire_effect;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t] + ceasefire_effect * ceasefire[t];
}
}
model {
real draw_from;
for (t in 365:n){
draw_from = 0;
for (j in 1:364){
draw_from = draw_from - y_seasonal[t - j];
}
y_seasonal[t] ~ normal(draw_from, sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + y_seasonal[t]);
}"
stan_data <- list(y <- daily$shootings,
n <- nrow(daily),
ceasefire <- daily$ceasefire)
fit <- stan(model_code=model_code, data=stan_data, cores=2, chains=2, iter = 40, control=list(adapt_delta=.95))
seasonal <- get_posterior_mean(fit, pars="y_seasonal")[, 'mean-all chains']
seasonal <- ts(seasonal, start = start(y), frequency = frequency(y))
autoplot(seasonal, ts.colour = 'blue') + ggtitle("yearly seasonal component")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
}
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t];
}
}
model {
real draw_from;
for (t in 365:n){
draw_from = 0;
for (j in 1:364){
draw_from = draw_from - y_seasonal[t - j];
}
y_seasonal[t] ~ normal(draw_from, sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + y_seasonal[t]);
}"
stan_data <- list(y <- daily$shootings,
n <- nrow(daily),
ceasefire <- daily$ceasefire)
fit <- stan(model_code=model_code, data=stan_data, cores=2, chains=2, iter = 50, control=list(adapt_delta=.95))
seasonal <- get_posterior_mean(fit, pars="y_seasonal")[, 'mean-all chains']
seasonal <- ts(seasonal, start = start(y), frequency = frequency(y))
autoplot(seasonal, ts.colour = 'blue') + ggtitle("yearly seasonal component")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
n
547/60
200/60
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t];
}
}
model {
for (t in 365:n){
y_seasonal[t] ~ normal(-sum(y_seasonal[(t-364):(t-1)]), sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + y_seasonal[t]);
}"
stan_data <- list(y <- daily$shootings,
n <- nrow(daily),
ceasefire <- daily$ceasefire)
fit <- stan(model_code=model_code, data=stan_data, cores=2, chains=2, iter = 50, control=list(adapt_delta=.95))
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t] <- seasonal[t] - seasonal[t - j]
}
}
plot(seasonal)
seasonal <- get_posterior_mean(fit, pars="y_seasonal")[, 'mean-all chains']
seasonal <- ts(seasonal, start = start(y), frequency = frequency(y))
autoplot(seasonal, ts.colour = 'blue') + ggtitle("yearly seasonal component")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t] <- seasonal[t] - seasonal[t - j]
}
}
seasonal <- seasonal1
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
for (j in (s-1):1){
seasonal[t] <- seasonal[t] - seasonal[t - j]
}
}
seasonal1 <- seasonal
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
seasonal[t] <- sum(- seasonal[(t-364):(t-1)]
}
sum(!(seasonal1 == seasonal))
s <- 365
seasonal <- numeric(length(daily$shootings))
for (t in 1:(s-1)){
seasonal[t] <- daily$shootings[t]
}
for (t in s:length(seasonal)){
seasonal[t] <- sum(- seasonal[(t-364):(t-1)])
}
sum(!(seasonal1 == seasonal))
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t];
}
}
model {
for (t in 365:n){
y_seasonal[t] ~ normal(-sum(y_seasonal[(t-364):(t-1)]), sigma_yday);
}
sigma_wday ~ inv_gamma(.001,.001);
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + w_seasonal[t] + y_seasonal[t]);
}"
stan_data <- list(y <- daily$shootings,
n <- nrow(daily),
ceasefire <- daily$ceasefire)
fit <- stan(model_code=model_code, data=stan_data, cores=4, chains=4, iter = 500, control=list(adapt_delta=.8, max_treedepth=20))
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t];
}
}
model {
for (t in 365:n){
y_seasonal[t] ~ normal(-sum(y_seasonal[(t-364):(t-1)]), sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + w_seasonal[t] + y_seasonal[t]);
}"
stan_data <- list(y <- daily$shootings,
n <- nrow(daily),
ceasefire <- daily$ceasefire)
fit <- stan(model_code=model_code, data=stan_data, cores=3, chains=3, iter = 100, control=list(adapt_delta=.9))
# stochastic level (mu)
model_code <- "data {
int<lower=1> n;
int y[n];
}
parameters {
vector[n] mu;
vector[n] y_seasonal;
real<lower=0> sigma_level;
real<lower=0> sigma_yday;
}
transformed parameters {
vector[n] yhat;
for(t in 1:n) {
yhat[t] = mu[t];
}
}
model {
for (t in 365:n){
y_seasonal[t] ~ normal(-sum(y_seasonal[(t-364):(t-1)]), sigma_yday);
}
sigma_yday ~ inv_gamma(.001,.001);
for(t in 2:n)
mu[t] ~ normal(mu[t-1], sigma_level);
for(t in 1:n)
y[t] ~ poisson_log(yhat[t] + y_seasonal[t]);
}"
fit <- stan(model_code=model_code, data=stan_data, cores=3, chains=3, iter = 100, control=list(adapt_delta=.9))
seasonal <- get_posterior_mean(fit, pars="y_seasonal")[, 'mean-all chains']
seasonal <- ts(seasonal, start = start(y), frequency = frequency(y))
autoplot(seasonal, ts.colour = 'blue') + ggtitle("yearly seasonal component")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
ceasefire.effect <- as.array(fit, pars = "ceasefire_effect")
seasonal <- get_posterior_mean(fit, pars="y_seasonal")[, 'mean-all chains']
seasonal <- ts(seasonal, start = start(y), frequency = frequency(y))
autoplot(seasonal, ts.colour = 'blue') + ggtitle("yearly seasonal component")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
yhat <- get_posterior_mean(fit, pars="mu")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
yhat <- get_posterior_mean(fit, pars="yhat")[, 'mean-all chains']
yhat <- exp(yhat)
y <- ts(daily$shootings, start = c(2012, 1), frequency = 365)
p <- autoplot(y, alpha=.2)
yhat <- ts(yhat, start = start(y), frequency = frequency(y))
p <- autoplot(yhat, p = p, ts.colour="blue")
p + ggtitle("trend")
